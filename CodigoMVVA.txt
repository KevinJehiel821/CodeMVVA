//DetecManos.py

import cv2
import DetecManos as dm 
import mediapipe as mp
import time
import math
import numpy as np O 
import autopy
import pyautogui

cap = cv2.VideoCapture(0)

class detectormanos():
   
    def __init__(self, mode=False, maxManos=2, Confdeteccion=0.5, Confsegui=0.5):
        self.mode = mode  
        self.manosup = manosup  
        self.detecciono = detecciono
        self.seguimientoM = seguimientoM

        
        self.mpmanos = mp.solutions.hands
        self.manos = self.mpmanos.Hands(self.mode, self.manosup, self.detecciono, seguimientoM)
        self.drawhand = mp.solutions.drawing_utils #se dibujan las manos
	screen_width, screen_height = pyautogui.size()
        self.tip = [4, 8, 12, 16, 20]

    
    def hallarmanos(self, frame, drawhand=True):
        imgcolor = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        self.resultados = self.manos.process(imgcolor)

        if self.resultados.multi_hand_landmarks:
            for mano in self.resultados.multi_hand_landmarks:
                if drawhand:
                    self.dibujo.draw_landmarks(frame, mano, self.mpmanos.HAND_CONNECTIONS)
        return frame #si se encuentran las manos, son dibujadas


    
    def findposicion(self, frame, ManoNum=0, drawhand=True):
        xlista = []
        ylista = []
        bbox = []
        self.lista = []
        if self.resultados.multi_hand_landmarks:
            manouser = self.resultados.multi_hand_landmarks[ManoNum]
            for id, lm in enumerate(manouser.landmark):
                alto, ancho, c = frame.shape
                cx, cy, = int(lm.x * ancho), int(lm.y * alto)
                xtab.append(cx)
                ytab.append(cy)
                self.lista.append([id, cx, cy])
                if drawhand:
                    cv2.circle(frame, (cx, cy), 5, (0, 0, 0), cv2.FILLED)  # Dibujamos un circulo

            xmen, xmay = min(xtab), max(xtab) ymin, ymax = min(ylista), max(ylista) bbox = xmen, ymin, xmay, ymax
            if drawhand:
                cv2.rectangle(frame, (xmen - 20, ymin - 20), (xmay + 20, ymax + 20), (0, 255, 0), 2)
        return self.lista, bbox

    
    def ManoExtendida(self):
        dedos = []
        if self.tab[self.tip[0]][1] > self.tab[self.tip[0] - 1][1]:
            dedos.append(1)
        else:
            dedos.append(0)

        for id in range(1, 5):
            if self.tab[self.tip[id]][2] < self.tab[self.tip[id] - 2][2]:
                dedos.append(1)
            else:
                dedos.append(0)

        return dedos

    
    def distancia(self, p1, p2, frame, drawhand=True, r=15, t=3):
        x1, y1 = self.tab[p1][1:]
        x2, y2 = self.tab[p2][1:]
        cx, cy = (x1 + x2) // 2, (y1 + y2) // 2 #distancia entre dedos
        if drawhand:
            cv2.line(frame, (x1, y1), (x2, y2), (0, 0, 255), t)
            cv2.circle(frame, (x1, y1), r, (0, 0, 255), cv2.FILLED)
            cv2.circle(frame, (x2, y2), r, (0, 0, 255), cv2.FILLED)
            cv2.circle(frame, (cx, cy), r, (0, 0, 255), cv2.FILLED)
        length = math.hypot(x2 - x1, y2 - y1)#dibujo de circulo en dedos

        return length, frame, [x1, y1, x2, y2, cx, cy]

def main():
    ptiempo = 0
    ctiempo = 0

    cap = cv2.VideoCapture(0)
    detector = detectormanos()
   

    while True:
        ret, frame = cap.read()
        frame = detector.hallarmanos(frame)
        tab, bbox = detector.findposicion(frame)
        if len(tab) != 0:
            print(tab[4])
        ctiempo = time.time()
        fps = 1 / (ctiempo - ptiempo)
        ptiempo = ctiempo
        cv2.putText(frame, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)
        cv2.imshow("Manos", frame)
        k = cv2.waitKey(1)
        if k == 27:
            break
    cap.release()
    cv2.destroyAllWindows()







-------------0000000000000000000000000000000000000-------------------------------
//MouseVirtualVA.py

import cv2
import numpy as np
import DetecManos as dm
import autopy  
import mediapipe as mp
import pyautogui

cap = cv2.VideoCapture(0)
hand_detector = mp.solutions.hands.Hands()
drawing_utils = mp.solutions.drawing_utils
screen_width, screen_height = pyautogui.size()
in_y = 0


anchocam, altocam = 640, 480
cuadro = 100 #Rango donde podemos interactura
anchopanta, altopanta = autopy.screen.size()
R = 5
pubix, pubiy = 0,0
cubix, cubiy = 0,0
#print(anchopanta, anchocam)


cap = cv2.VideoCapture(0) #Se hace la captura de la imagen a traves de la camara
cap.set(3,anchocam)
cap.set(4,altocam)
detector = sm.detectormanos(manosup=1)

while True:
    ret, frame = cap.read()
    frame = detec.hallarmanos(frame)  #Se hallan las manos
    tab, bc = detec.findposicion(frame) #Mostramos las posiciones


    if len(tab) != 0:
        x1, y1 = tab[8][1:] #Extraemos las coordenadas del dedo indice
        x2, y2 = tab[4][1:] #Extraemos las coordenadas del dedo pulgar
        #print(x1,y1,x2,y2)

	dedos = detec.ManoExtendida() 
        #print(dedos)
        cv2.rectangle(frame, (cuadro, cuadro), (anchocam - cuadro, altocam - cuadro), (0, 0, 0), 2)
        if dedos[1]== 1 and dedos[2] == 0: 

            xHand = np.interp(x1, (cuadro,anchocam-cuadro), (0,anchopanta))
            yxHand = np.interp(y1, (cuadro, altocam-cuadro), (0, altopanta))
            autopy.mouse.move(anchopanta - Ax,Ay) #Se envian las coordenadas al Mouse
            cv2.circle(frame, (x1,y1), 10, (0,0,0), cv2.FILLED)
            Bx, By = Ax, Ay
            
	    cv2.circle(frame, (cx, cy), 5, (0, 0, 0), cv2.FILLED)  # Dibujamos un circulo

            xmen, xmay = min(xtab), max(xtab) ymin, ymax = min(ytab), max(ytab) bc = xmen, ymin, xmay, ymax
            if drawhand:
                cv2.rectangle(frame, (xmen - 20, ymen - 20), (xmay + 20, ymay + 20), (0, 255, 0), 2)
        return self.tab, bc

    
    def ManoExtendida(self):
        dedos = []
        if self.tab[self.tip[0]][1] > self.tab[self.tip[0] - 1][1]:
            dedos.append(1)
        else:
            dedos.append(0)

        for id in range(1, 5):
            if self.tab[self.tip[id]][2] < self.tab[self.tip[id] - 2][2]:
                dedos.append(1)
            else:
                dedos.append(0)
        return dedos

    
    def distancia(self, p1, p2, frame, dibujar=True, r=15, t=3):
        x1, y1 = self.tab[p1][1:]
        x2, y2 = self.tab[p2][1:]
        cx, cy = (x1 + x2) // 2, (y1 + y2) // 2 #distancia entre dedos
        if dibujar:
            cv2.line(frame, (x1, y1), (x2, y2), (0, 0, 255), t)
            cv2.circle(frame, (x1, y1), r, (0, 0, 255), cv2.FILLED)
            cv2.circle(frame, (x2, y2), r, (0, 0, 255), cv2.FILLED)
            cv2.circle(frame, (cx, cy), r, (0, 0, 255), cv2.FILLED)
        length = math.hypot(x2 - x1, y2 - y1) #dibujo de circulo en dedos

        return length, frame, [x1, y1, x2, y2, cx, cy]



     if hands:
        for hand in hands:
            drawing_utils.draw_landmarks(frame, hand)
            landmarks = hand.landmark
            for id, landmark in enumerate(landmarks):
                x = int(landmark.x*frame_width)
                y = int(landmark.y*frame_height)
                if id == 8:
                    cv2.circle(img=frame, center=(x,y), radius=10, color=(0, 255, 255))
                    in_x = screen_width/frame_width*x
                    in_y = screen_height/frame_height*y

                if id == 4:
                    cv2.circle(img=frame, center=(x,y), radius=10, color=(0, 255, 255))
                    thumb_x = screen_width/frame_width*x
                    thumb_y = screen_height/frame_height*y
                    print('outside', abs(in_y - thumb_y))
                    if abs(in_y - thumb_y) < 15:
                        pyautogui.click()
                        pyautogui.sleep(1)
                    elif abs(in_y - thumb_y) < 100:
                        pyautogui.moveTo(in_x, in_y)
    cv2.imshow('Mouse Virtual', frame)
    k = cv2.waitKey(1) #cv2.waitKey(1)
    if k == 27:
        break
cap.release()
cv2.destroyAllWindows()